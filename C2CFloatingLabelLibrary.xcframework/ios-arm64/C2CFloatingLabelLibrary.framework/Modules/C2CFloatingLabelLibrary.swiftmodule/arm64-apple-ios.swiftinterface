// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name C2CFloatingLabelLibrary
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
@_exported import C2CFloatingLabelLibrary
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@IBDesignable @_Concurrency.MainActor @preconcurrency public class C2CSdkFloatingLabelBorderLine : UIKit.UIView, UIKit.UITextFieldDelegate {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var PlaceHolder: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var TextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var borderLineColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var RequiredColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var LabelBGColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ShowTextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var HideTextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var Height: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var LeftSideImage: UIKit.UIImage?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var RightSideImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var TextFontStyle: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var TextFontSize: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ErrorMessage: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var SetErrorMessage: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ErrorMessColor: UIKit.UIColor
  @_Concurrency.MainActor @preconcurrency final public let textField: UIKit.UITextField
  @_Concurrency.MainActor @preconcurrency final public let floatingLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let borderLayer: QuartzCore.CAShapeLayer
  @_Concurrency.MainActor @preconcurrency public var borderLineLable: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let rightIconImageBtn: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public let leftIconImageBtn: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency public var errorMessageLbl: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public func setExternalDelegate(_ delegate: (any UIKit.UITextFieldDelegate)?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func showFloatingLabelEvent()
  @_Concurrency.MainActor @preconcurrency public func hideFloatingLabelEvent()
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func getImage(named: UIKit.UIImage) -> UIKit.UIImageView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@IBDesignable @_Concurrency.MainActor @preconcurrency public class C2CSdkFloatingLabelTextFieldView : UIKit.UIView, UIKit.UITextFieldDelegate {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var PlaceHolder: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var TextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var CornerRadiues: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var BColorHeight: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var RequiredColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var LabelBGColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ShowStrokeColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ShowTextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var HideStrokeColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var HideTextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var height: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var leftSideImage: UIKit.UIImage?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var rightSideImage: UIKit.UIImage?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var TextFontStyle: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var TextFontSize: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ErrorMessage: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ErrorMessColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var SetErrorMessage: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public let textField: UIKit.UITextField
  @_Concurrency.MainActor @preconcurrency final public let floatingLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let rightIconImageBtn: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency final public let leftIconImageBtn: UIKit.UIButton
  @_Concurrency.MainActor @preconcurrency public var errorMessageLbl: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public func setExternalDelegate(_ delegate: (any UIKit.UITextFieldDelegate)?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func showFloatingLabelEvent()
  @_Concurrency.MainActor @preconcurrency public func hideFloatingLabelEvent()
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency public static func getImage(named: UIKit.UIImage) -> UIKit.UIImageView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 13.0, *)
@IBDesignable @_Concurrency.MainActor @preconcurrency public class C2CFloatingLabelTextView : UIKit.UIView, UIKit.UITextViewDelegate {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var PlaceHolder: Swift.String {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var TextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var CornerRadiues: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var BColorHeight: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var RequiredColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var LabelBGColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ShowStrokeColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ShowTextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var HideStrokeColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var HideTextColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var height: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var TextFontStyle: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var TextFontSize: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ErrorMessage: Swift.String
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var ErrorMessColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var SetErrorMessage: Swift.Bool
  @_Concurrency.MainActor @preconcurrency final public let textField: UIKit.UITextView
  @_Concurrency.MainActor @preconcurrency final public let floatingLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency final public let borderLayer: QuartzCore.CAShapeLayer
  @_Concurrency.MainActor @preconcurrency public var message_TextCount: Swift.String
  @_Concurrency.MainActor @preconcurrency public var errorMessageLbl: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency public func setExternalDelegate(_ delegate: (any UIKit.UITextViewDelegate)?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func showFloatingLabelEvent()
  @_Concurrency.MainActor @preconcurrency public func hideFloatingLabelEvent()
  @_Concurrency.MainActor @preconcurrency @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor @preconcurrency @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public func fontColor(text: Swift.String, colorText: Swift.String, color: UIKit.UIColor, label: UIKit.UILabel)
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func addTapGestureRecognizer(action: (() -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers public class C2CConstantFile : ObjectiveC.NSObject {
  public static var bundle: Foundation.Bundle {
    get
  }
  public static func getImageThoughtResourceFile(named: Swift.String) -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class C2CSdkEIColor : UIKit.UIColor {
  @objc override dynamic public init(white: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  @objc override dynamic public init(hue: CoreFoundation.CGFloat, saturation: CoreFoundation.CGFloat, brightness: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  @objc override dynamic public init(red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  @available(iOS 10.0, *)
  @objc override dynamic public init(displayP3Red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  @objc override dynamic public init(cgColor: CoreGraphics.CGColor)
  @objc override dynamic public init(patternImage image: UIKit.UIImage)
  @available(iOS 5.0, *)
  @objc override dynamic public init(ciColor: CoreImage.CIColor)
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @available(iOS 13.0, *)
  @objc override dynamic public init(dynamicProvider: @escaping (UIKit.UITraitCollection) -> UIKit.UIColor)
  @objc deinit
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public static func addKeyboardToolbar(withDoneButton doneAction: @escaping () -> Swift.Void, clearButtonAction: @escaping () -> Swift.Void) -> UIKit.UIToolbar
}
